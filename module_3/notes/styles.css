box-sizing: content-box | border-box | inherit 

Ширина = width + padding-left + padding-right + border-left + border-right

Висота = height + padding-top + padding-bottom + border-top + border-bottom


/* Фінальна ширина блока = 150px + 30px + 30px + 5px + 5px  (for content-box)*/  
.box {
    width: 150px;
    height: 150px;
    border: 5px solid #f44336;
    padding: 30px;
    margin: 100px;
    background-color: #ffeb3b;
}


/* Якщо задати властивості box-sizing значення border-box,
то тип блокової моделі поточного елемента зміниться. */
.box {
    box-sizing: border-box;
    width: 150px;
    height: 150px;
    border: 5px solid #f44336;
    padding: 30px;
    margin: 100px;
    background-color: #ffeb3b;
}


*,
*::before,
*::after {
    box-sizing: border-box;
}

/* Решта коду */


/* Однакові поля по 20px з усіх боків */
padding: 20px;

/* Поля зверху та знизу по 10px, зліва та праворуч по 20px */
padding: 10px 20px;

/* Поле зверху 10px, ліворуч і праворуч по 20px, знизу 5px */
padding: 10px 20px 5px;

/* Поле зверху 10px, праворуч 15px, знизу 20px, ліворуч 25px */
padding: 10px 15px 20px 25px;




/* Однакові відступи по 20px з усіх боків */
margin: 20px;

/* Відступ зверху та знизу по 10px, зліва та праворуч по 20px */
margin: 10px 20px;

/* Відступ зверху 10px, ліворуч і праворуч по 20px, знизу 5px */
margin: 10px 20px 5px;

/* Відступ зверху 10px, праворуч 15px, знизу 20px, зліва 25px */
margin: 10px 15px 20px 25px;



h1,
h2,
h3,
h4,
h5,
h6,
p {
    margin-top: 0;
    margin-bottom: 0;
}

ul,
ol {
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0;
}



.box {
    width: 200px;
    height: 200px;
    border: 5px solid orangered;
}
.box:hover {
    border-color: cyan;
}



.box {
    width: 200px;
    height: 200px;

    border-top: 3px solid blue;
    border-right: 5px dotted black;
    border-bottom: 7px dashed palevioletred;
    border-left: 9px double green;
}


/* Аби заокруглити всі кути рамки,
застосовується властивість border-radius. Значення можуть бути як абсолютні (px),
так і відносні (%). Якщо квадратному елементу задати радіус 50%,
це перетворить його на коло. */


/* верхній лівий кут */
border-top-left-radius: значення;

/* верхній правий кут */
border-top-right-radius: значення;

/* нижній правий кут */
border-bottom-right-radius: значення;

/* нижній лівий кут */
border-bottom-left-radius: значення;




<div class="thumb"><img src="https://images.pexels.com/photos/33492/cat-red-cute-mackerel.jpg?auto=compress&cs=tinysrgb&h=480&w=640" alt=""></div>

* {
    box-sizing: border-box;
}

img {
    display: block;
    max-width: 100%;
}

.thumb {
    border: 10px solid green;
    border-radius: 50px;
    width: 480px;

    overflow: hidden;
}


overflow: visible | hidden | scroll | auto 



.box {
    width: 300px;
    background-color: tomato;
    margin-right: auto;
    margin-left: auto;
}

/* Аби скоротити запис,
можна скористатися складаною властивістю margin,
задати нульові вертикальні значення й автоматичні горизонтальні. */ 

.box {
    width: 300px;
    background-color: tomato;
    margin: 0 auto;
}


.container {
    width: 480px;
    margin: 0 auto;
    padding: 0 15px;
}


.link {
    background-color: tomato;
    color: white;

    /* ✅ Працює */
    padding-left: 20px;
    padding-right: 20px;
    margin-right: 50px;
    margin-left: 50px;

    /* ❌ Ніякого ефекта */
    width: 1000px;
    height: 1000px;
    margin-top: 100px;
    margin-bottom: 100px;
}


<div class="tabs"><div class="pane is-active">1 - Lorem ipsum dolor sit amet consectetur.</div><div class="pane">2 - Lorem ipsum dolor sit amet consectetur.</div><div class="pane">3 - Lorem ipsum dolor sit amet consectetur.</div></div>

.pane {
    display: none;
    padding: 8px;
    border: 1px solid blue;
    border-radius: 4px;
}

.pane.is-active {
    display: block;
}



img {
    display: block;
    max-width: 100%;
}


object-fit: fill | contain | cover | scale-down | none


<div class="thumb"><img src="" alt="" /></div>
.thumb {
    height: 400px;
    width: 300px;
}
.thumb img {
    height: 100%;
    width: 100%;
    object-fit: cover;
}


display: flex | inline-flex 


<ul class="menu"><li class="item"><a href="" class="link">Головна</a></li><li class="item"><a href="" class="link">Блог</a></li><li class="item"><a href="" class="link">Подкасти</a></li><li class="item"><a href="" class="link">Контакти</a></li></ul>

.menu {
    display: flex;
    gap: 8px;
}


flex-direction: row | row-reverse | column | column-reverse


justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly

align-items: stretch | flex-start | flex-end | center | baseline



.card {
    display: flex;
    align-items: flex-start;
}

flex-wrap: nowrap | wrap | wrap-reverse


.card-set {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}
/* Останній крок — задати розмір flex-елементів li.item. Ширина вказується у відсотках від загальної ширини батьківського елемента (100%) за такою формулою. */
100% - кількість_проміжків_у_рядку * значення_одного_проміжку) / кількість_елементів_у_рядку 
/* Кількість проміжків між елементами в рядку завжди на одиницю менша за кількість елементів. У нашій сітці три елементи в рядок,
отже в одному рядку є два проміжки по 10px. */
.item {
    width: calc((100% - 2*10px) / 3);
}


align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch


flex-basis: auto | значення


/* Властивість flex-grow — визначає здатність елемента займати більше місця (рости),
ніж початковий розмір. Значення визначається як пропорція (частка) вільного місця в контейнері. */
flex-grow: частка



<div class="page-container"><header>Page header</header><main>Main content</main><footer>Page footer</footer></div>
/* Перше,
що зробимо,
— задамо йому мінімальну висоту 100% висоти вкладки браузера на екрані користувача,
використовуючи одиниці vh (viewport height — відсоток від висоти області перегляду 5vh=5% висоти). */
.page-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Залишилося задати main властивість flex-grow,
щоб дозволити йому займати все вільне місце на головній осі,
відсуваючи «футер» у її кінець,
тобто вниз. */
main {
    flex-grow: 1;
}

flex-shrink: значення;
/* Значення задається у вигляді пропорції (частка, фактор). За замовчуванням у всіх елементів встановлено значення 1,
тобто елементи стискатимуться за потреби. Значення 0 заборонить елементу стискатися. Негативні значення задавати не можна. */

.icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
}


/* Властивість align-self дозволяє елементу змінити своє розташування на cross axis,
перевизначивши собі значення властивості align-items від контейнера. */
align-self: auto | flex-start | flex-end | center | baseline | stretch


/* Для вирішення проблеми вертикального розтягування картинки ми використовували властивість контейнера align-items. Властивість align-self дозволяє вирішити цю проблему більш точково,
перевизначивши значення align-items тільки для зображення. */
.card img {
    align-self: flex-start;
}



<ul class="list"><li class="list-item">HTML</li><li class="list-item">CSS</li><li class="list-item">JavaScript</li><li class="list-item">React</li></ul>.list-item {
    color: blue;
}

.list-item:first-child {
    color: red;
}

.list-item:last-child {
    color: green;
}


.list-item {
    margin-bottom: 12px;
}

.list-item:last-child {
    margin-bottom: 0;
}


.list-item:not(:last-child) {
    margin-bottom: 20px;
}



<ul class="list"><li class="list-item">1</li><li class="list-item">2</li><li class="list-item">3</li><li class="list-item">4</li><li class="list-item">5</li><li class="list-item">6</li><li class="list-item">7</li><li class="list-item">8</li><li class="list-item">9</li><li class="list-item">10</li></ul>

/* Для вибору всіх парних елементів можна використовувати формулу 2n або її псевдонім — значення even,
зарезервоване слово. */
.list-item:nth-child(2n) {
    background-color: orange;
}

/* Аналогічно використовуючи псевдонім */
.list-item:nth-child(even) {
    background-color: orange;
}

/* Для вибору непарних елементів можна використовувати формулу 2n+1 або її псевдонім — значення odd,
зарезервоване слово. */
.list-item:nth-child(2n + 1) {
    background-color: orange;
}

/* Аналогічно використовуючи псевдонім */
.list-item:nth-child(odd) {
    background-color: orange;
}